# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class InlineResponse200(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InlineResponse200 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'credits_monthly_used': 'int',
            'credits_monthly_total': 'int',
            'img_width': 'int',
            'color': 'list[Classification]',
            'makemodel': 'list[Classification]',
            'total_processing_time': 'float',
            'img_height': 'int',
            'credit_cost': 'int',
            'plate': 'AlprPlate',
            'make': 'list[Classification]'
        }

        self.attribute_map = {
            'credits_monthly_used': 'credits_monthly_used',
            'credits_monthly_total': 'credits_monthly_total',
            'img_width': 'img_width',
            'color': 'color',
            'makemodel': 'makemodel',
            'total_processing_time': 'total_processing_time',
            'img_height': 'img_height',
            'credit_cost': 'credit_cost',
            'plate': 'plate',
            'make': 'make'
        }

        self._credits_monthly_used = None
        self._credits_monthly_total = None
        self._img_width = None
        self._color = None
        self._makemodel = None
        self._total_processing_time = None
        self._img_height = None
        self._credit_cost = None
        self._plate = None
        self._make = None

    @property
    def credits_monthly_used(self):
        """
        Gets the credits_monthly_used of this InlineResponse200.
        The number of API credits used this month

        :return: The credits_monthly_used of this InlineResponse200.
        :rtype: int
        """
        return self._credits_monthly_used

    @credits_monthly_used.setter
    def credits_monthly_used(self, credits_monthly_used):
        """
        Sets the credits_monthly_used of this InlineResponse200.
        The number of API credits used this month

        :param credits_monthly_used: The credits_monthly_used of this InlineResponse200.
        :type: int
        """
        self._credits_monthly_used = credits_monthly_used

    @property
    def credits_monthly_total(self):
        """
        Gets the credits_monthly_total of this InlineResponse200.
        The maximum number of API credits available this month according to your plan

        :return: The credits_monthly_total of this InlineResponse200.
        :rtype: int
        """
        return self._credits_monthly_total

    @credits_monthly_total.setter
    def credits_monthly_total(self, credits_monthly_total):
        """
        Sets the credits_monthly_total of this InlineResponse200.
        The maximum number of API credits available this month according to your plan

        :param credits_monthly_total: The credits_monthly_total of this InlineResponse200.
        :type: int
        """
        self._credits_monthly_total = credits_monthly_total

    @property
    def img_width(self):
        """
        Gets the img_width of this InlineResponse200.
        Width of the uploaded image in pixels

        :return: The img_width of this InlineResponse200.
        :rtype: int
        """
        return self._img_width

    @img_width.setter
    def img_width(self, img_width):
        """
        Sets the img_width of this InlineResponse200.
        Width of the uploaded image in pixels

        :param img_width: The img_width of this InlineResponse200.
        :type: int
        """
        self._img_width = img_width

    @property
    def color(self):
        """
        Gets the color of this InlineResponse200.
        Results from color vehicle analysis task

        :return: The color of this InlineResponse200.
        :rtype: list[Classification]
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this InlineResponse200.
        Results from color vehicle analysis task

        :param color: The color of this InlineResponse200.
        :type: list[Classification]
        """
        self._color = color

    @property
    def makemodel(self):
        """
        Gets the makemodel of this InlineResponse200.
        Results from makemodel vehicle analysis task

        :return: The makemodel of this InlineResponse200.
        :rtype: list[Classification]
        """
        return self._makemodel

    @makemodel.setter
    def makemodel(self, makemodel):
        """
        Sets the makemodel of this InlineResponse200.
        Results from makemodel vehicle analysis task

        :param makemodel: The makemodel of this InlineResponse200.
        :type: list[Classification]
        """
        self._makemodel = makemodel

    @property
    def total_processing_time(self):
        """
        Gets the total_processing_time of this InlineResponse200.
        Time spent processing all tasks (in milliseconds)

        :return: The total_processing_time of this InlineResponse200.
        :rtype: float
        """
        return self._total_processing_time

    @total_processing_time.setter
    def total_processing_time(self, total_processing_time):
        """
        Sets the total_processing_time of this InlineResponse200.
        Time spent processing all tasks (in milliseconds)

        :param total_processing_time: The total_processing_time of this InlineResponse200.
        :type: float
        """
        self._total_processing_time = total_processing_time

    @property
    def img_height(self):
        """
        Gets the img_height of this InlineResponse200.
        Height of the input image in pixels

        :return: The img_height of this InlineResponse200.
        :rtype: int
        """
        return self._img_height

    @img_height.setter
    def img_height(self, img_height):
        """
        Sets the img_height of this InlineResponse200.
        Height of the input image in pixels

        :param img_height: The img_height of this InlineResponse200.
        :type: int
        """
        self._img_height = img_height

    @property
    def credit_cost(self):
        """
        Gets the credit_cost of this InlineResponse200.
        The number of API credits that were used to process this image

        :return: The credit_cost of this InlineResponse200.
        :rtype: int
        """
        return self._credit_cost

    @credit_cost.setter
    def credit_cost(self, credit_cost):
        """
        Sets the credit_cost of this InlineResponse200.
        The number of API credits that were used to process this image

        :param credit_cost: The credit_cost of this InlineResponse200.
        :type: int
        """
        self._credit_cost = credit_cost

    @property
    def plate(self):
        """
        Gets the plate of this InlineResponse200.


        :return: The plate of this InlineResponse200.
        :rtype: AlprPlate
        """
        return self._plate

    @plate.setter
    def plate(self, plate):
        """
        Sets the plate of this InlineResponse200.


        :param plate: The plate of this InlineResponse200.
        :type: AlprPlate
        """
        self._plate = plate

    @property
    def make(self):
        """
        Gets the make of this InlineResponse200.
        Results from make vehicle analysis task

        :return: The make of this InlineResponse200.
        :rtype: list[Classification]
        """
        return self._make

    @make.setter
    def make(self, make):
        """
        Sets the make of this InlineResponse200.
        Results from make vehicle analysis task

        :param make: The make of this InlineResponse200.
        :type: list[Classification]
        """
        self._make = make

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

